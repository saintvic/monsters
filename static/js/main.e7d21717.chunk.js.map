{"version":3,"sources":["components/card/CardComponent.jsx","components/card-list/CardListComponent.jsx","components/search-box/SearchBox.jsx","App.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAMaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,mCAAMN,EAAMI,QAAQG,aCHfC,G,MAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAwBA,QAAUA,GAAvBA,EAAQC,WCPfM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAW,SACXa,KAAK,SACLF,YAAcA,EAEdG,SAAUF,MCkDHG,G,wDAnDb,aAAe,IAAD,8BACZ,gBAqBFH,aAAe,SAACI,GAEd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SArBtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAYd,WAAqB,IAAD,OAClBI,MAAM,6CAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAASkB,S,oBAW1C,WAAS,MAE2BC,KAAKN,MAA/Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YAEZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAG9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEhD,OACA,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAWoB,W,GA5CXI,cCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e7d21717.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './card.styles.css';\n// this compnent receives monster as prop to \n// display the name\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h1>{props.monster.name}</h1>\n        <h2> {props.monster.email}</h2>\n    </div>\n);","// this CarList component displays the list of monsters on the webpage\nimport React from \"react\";\n\nimport { Card } from \"../card/CardComponent\";\n\nimport \"./card-list.styles.css\";\n\nexport const CardList = (props) => {\n  return (\n    <div className='card-list'>\n        {props.monsters.map(monster => \n         <Card key={monster.id}  monster={ monster}/>\n        )}\n    </div>);\n};\n\n// we are passing the state monster into the Card Compont \n// which the card component get as 'props' to display","import React from 'react';\n\nimport './search-box.css';\n// destructurin placehold n handleChange use as props\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n        className= 'search'\n        type='search' \n        placeholder= {placeholder}\n// onChange is a Async funct that creates synthetic event in react.  allows u to track the targetted value and set it to the state\n        onChange={handleChange }\n        />\n)","// My version idea: Contacts Rolodex, Book Library, Music Library\nimport React , {Component} from 'react';\n\nimport { CardList } from './components/card-list/CardListComponent';\nimport { SearchBox } from './components/search-box/SearchBox';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    \n  }\n// mounting is when react renders page before executing the code\n// inside the compdidMount() lifecycle method\n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users')\n    // we are taking the response from fetch('url') n converting it into json format\n    .then(response => response.json())\n    .then(users => this.setState({ monsters:users }) )\n    // u only call a .then() on a resolve promise that wraps around \n    // the resolve value and passed back down to the next chained \n    // .then()\n}\n  // always write class methods with arrow func to prevent binding\n  handleChange = (e) => {\n    // lexical scoping to bind 'this' to the constructor\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    // destructering the states monster n seachF\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster => \n    // toLowerCase prevents case sensitive search\n    // we are checkin to see whether values in search box matches names in the state\n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n      return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters= {filteredMonsters} />\n    {/* code inbetween in the component is accessed with props.children */}\n          \n      </div>\n    );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}